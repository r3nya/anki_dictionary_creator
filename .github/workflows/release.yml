name: Release

on:
  push:
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_release:
    name: Build and Release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for changelog generation
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Build Release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose
      - name: Get the version
        id: get_version
        shell: bash
        run: |
          # Extract version from GITHUB_REF
          VERSION=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          # Validate version format
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            Changes in this Release:
            ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
        if: matrix.os == 'ubuntu-latest' # Create release only once
      - name: Upload Release Asset (Ubuntu)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/anki_dictionary_creator
          asset_name: anki_dictionary_creator-${{ steps.get_version.outputs.VERSION }}-linux-x86_64
          asset_content_type: application/octet-stream
        if: matrix.os == 'ubuntu-latest'
      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: .\target\release\anki_dictionary_creator.exe
          asset_name: anki_dictionary_creator-${{ steps.get_version.outputs.VERSION }}-windows-x86_64.exe
          asset_content_type: application/vnd.microsoft.portable-executable
        if: matrix.os == 'windows-latest'
